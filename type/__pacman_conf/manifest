#!/bin/sh -e
#
# 2015 Dominique Roux (dominique.roux4 at gmail.com)
#
# This file is part of skonfig-base.
#
# skonfig-base is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-base is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-base. If not, see <http://www.gnu.org/licenses/>.
#

#get params
section=$(cat "${__object:?}/parameter/section")
key=$(cat "${__object:?}/parameter/key")
value=$(cat "${__object:?}/parameter/value")
file=$(cat "${__object:?}/parameter/file" 2>/dev/null)
state=$(cat "${__object:?}/parameter/state" 2>/dev/null)

#path variable default /etc/pacman.d
sec_path='/etc/pacman.d'

#allowed keys (from man pacman.conf)
allowed_option_keys='RootDir DBPath CacheDir GPGDir LogFile HoldPkg IgnorePkg IgnoreGroup Include Architecture XferCommand NoUpgrade NoExtract CleanMethod SigLevel LocalFileSigLevel RemoteFileSigLevel'
boolean_option_keys='UseSyslog Color UseDelta TotalDownload CheckSpace VerbosePkgLists'
allowed_repo_keys='Include Server SigLevel Usage'

#set global variables
MATCH=false

#function for check if array contain string
contains_element() {
    MATCH=false

    target=$1
    shift

    for key
    do
        case ${key}
        in
            ("${target}")
                MATCH=true
                return 0
                ;;
        esac
    done
}

if test -n "${file}"
then
    __file "${sec_path}/plain_file_${file}" \
        --state exists \
        --mode 666

    case ${state}
    in
        (present)
            require="__file/${sec_path}/plain_file_${file}" \
            __key_value "${file}_${key}" \
                --file "${sec_path}/plain_file_${file}" \
                --delimiter ' = ' \
                --key "${key}" \
                --value "${value}"
            exit 0
            ;;
        (absent)
            require="__file/${sec_path}/plain_file_${file}" \
            __key_value "${file}_${key}" \
                --state absent
            exit 0
            ;;
        (*)
            printf 'Invalid --state: %s\n' "${state}" >&2
            exit 0
            ;;
    esac
fi

if test "${section}" = 'options'
then

    __file "${sec_path}/${section}"\
            --state exists --mode 666 --source - <<EOF
[${section}]
EOF
    #check if key is valid
    #check for boolean value
    contains_element "${key}" "${boolean_option_keys}"

    if ${MATCH?}
    then
        case ${value}
        in
            (on)
                require="__file/${sec_path}/${section}" \
                __line "${key}_${value}" \
                    --file "${sec_path}/${section}" \
                    --line "${key}"
                ;;
            (off)
                require="__file/${sec_path}/${section}" \
                __line "${key}_${value}" \
                    --state absent \
                    --file "${sec_path}/${section}" \
                    --line "${key}"
                ;;
        esac
    else
        contains_element "${key}" "${allowed_option_keys}"

        if ${MATCH?}
        then
            require="__file/${sec_path}/${section}" \
            __key_value "${section}_${key}" \
                --file "${sec_path}/${section}" \
                --delimiter ' = ' \
                --key "${key}" \
                --value "${value}"
        else
            echo "Key: ${key} is not valid. Have a look at man pacman.conf" >&2
        fi
    fi
else
    __file "${sec_path}/repo_${section}" \
        --state exists \
        --mode 666 \
        --source - <<EOF
[${section}]
EOF

    case ${state}
    in
        (present)
            #check if key is valid
            contains_element "${key}" "${allowed_repo_keys}"

            ${MATCH?} || exit

            require="__file/${sec_path}/repo_${section}" \
            __key_value "${section}_${key}" \
                --file "${sec_path}/repo_${section}" \
                --delimiter ' = ' \
                --key "${key}" \
                --value "${value}"
            ;;
        (absent)
            require="__file/${sec_path}/repo_${section}" \
            __key_value "${section}_${key}" \
                --state absent
            ;;
        (*)
            printf 'Invalid --state: %s\n' "${state}" >&2
            exit 1
            ;;
    esac
fi
